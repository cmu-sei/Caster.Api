// <auto-generated />
using System;
using Caster.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Caster.Api.Data.Migrations
{
    [DbContext(typeof(CasterContext))]
    partial class CasterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Caster.Api.Domain.Models.Apply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Output")
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<Guid>("RunId")
                        .HasColumnType("uuid")
                        .HasColumnName("run_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("applies", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Design", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("DirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("directory_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("designs", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.DesignModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("DesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("design_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<string>("ModuleVersion")
                        .HasColumnType("text")
                        .HasColumnName("module_version");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ValuesJson")
                        .HasColumnType("text")
                        .HasColumnName("values_json");

                    b.HasKey("Id");

                    b.HasIndex("DesignId");

                    b.HasIndex("ModuleId");

                    b.ToTable("design_modules", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Directory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("AzureDestroyFailureThreshold")
                        .HasColumnType("integer")
                        .HasColumnName("azure_destroy_failure_threshold");

                    b.Property<bool>("AzureDestroyFailureThresholdEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("azure_destroy_failure_threshold_enabled");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Parallelism")
                        .HasColumnType("integer")
                        .HasColumnName("parallelism");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("TerraformVersion")
                        .HasColumnType("text")
                        .HasColumnName("terraform_version");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path");

                    b.HasIndex("ProjectId");

                    b.ToTable("directories", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AdministrativelyLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("administratively_locked");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("DateSaved")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_saved");

                    b.Property<Guid>("DirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("directory_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("LockedById")
                        .HasColumnType("uuid")
                        .HasColumnName("locked_by_id");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("LockedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.FileVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("DateSaved")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_saved");

                    b.Property<DateTime?>("DateTagged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_tagged");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<Guid?>("TaggedById")
                        .HasColumnType("uuid")
                        .HasColumnName("tagged_by_id");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TaggedById");

                    b.ToTable("file_versions", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.GroupMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("group_memberships", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Datastore")
                        .HasColumnType("text")
                        .HasColumnName("datastore");

                    b.Property<bool>("Development")
                        .HasColumnType("boolean")
                        .HasColumnName("development");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<int>("MaximumMachines")
                        .HasColumnType("integer")
                        .HasColumnName("maximum_machines");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("hosts", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.HostMachine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("host_machines", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.ModuleVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Outputs")
                        .HasColumnType("text")
                        .HasColumnName("outputs");

                    b.Property<string>("UrlLink")
                        .HasColumnType("text")
                        .HasColumnName("url_link");

                    b.Property<string>("Variables")
                        .HasColumnType("text")
                        .HasColumnName("variables");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("module_versions", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Partition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("pool_id");

                    b.HasKey("Id");

                    b.HasIndex("PoolId");

                    b.ToTable("partitions", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Output")
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<Guid>("RunId")
                        .HasColumnType("uuid")
                        .HasColumnName("run_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Pool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("pools", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("partition_id");

                    b.HasKey("Id");

                    b.HasIndex("PartitionId");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.ProjectMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"))
                        .HasColumnName("role_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "UserId", "GroupId")
                        .IsUnique();

                    b.ToTable("project_memberships", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.ProjectRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.ToTable("project_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3f26cd-9d99-4b98-b914-12931e786198"),
                            AllPermissions = true,
                            Description = "Can perform all actions on the Project",
                            Name = "Manager",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("39aa296e-05ba-4fb0-8d74-c92cf3354c6f"),
                            AllPermissions = false,
                            Description = "Has read only access to the Project",
                            Name = "Observer",
                            Permissions = new[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"),
                            AllPermissions = false,
                            Description = "Has read only access to the Project",
                            Name = "Member",
                            Permissions = new[] { 0, 1, 3 }
                        });
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.RemovedResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("removed_resources", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Run", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsDestroy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_destroy");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("ReplaceAddresses")
                        .HasColumnType("text")
                        .HasColumnName("replace_addresses");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Targets")
                        .HasColumnType("text")
                        .HasColumnName("targets");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("runs", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.SystemRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Immutable")
                        .HasColumnType("boolean")
                        .HasColumnName("immutable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("system_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f35e8fff-f996-4cba-b303-3ba515ad8d2f"),
                            AllPermissions = true,
                            Description = "Can perform all actions.",
                            Immutable = true,
                            Name = "Administrator",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("d80b73c3-95d7-4468-8650-c62bbd082507"),
                            AllPermissions = false,
                            Description = "Can create and manage their own Projects.",
                            Immutable = false,
                            Name = "Content Developer",
                            Permissions = new[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("1da3027e-725d-4753-9455-a836ed9bdb1e"),
                            AllPermissions = false,
                            Description = "Can perform all View actions, but not make any changes.",
                            Immutable = false,
                            Name = "Observer",
                            Permissions = new[] { 1, 7, 9, 11, 13, 15, 17, 19 }
                        });
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text")
                        .HasColumnName("default_value");

                    b.Property<Guid>("DesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("design_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("DesignId");

                    b.ToTable("variables", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Vlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("InUse")
                        .HasColumnType("boolean")
                        .HasColumnName("in_use");

                    b.Property<Guid?>("PartitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("partition_id");

                    b.Property<Guid>("PoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("pool_id");

                    b.Property<bool>("Reserved")
                        .HasColumnType("boolean")
                        .HasColumnName("reserved");

                    b.Property<bool>("ReservedEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("reserved_editable");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<int>("VlanId")
                        .HasColumnType("integer")
                        .HasColumnName("vlan_id");

                    b.HasKey("Id");

                    b.HasIndex("PartitionId");

                    b.HasIndex("PoolId");

                    b.HasIndex("VlanId");

                    b.ToTable("vlans", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("AzureDestroyFailureThreshold")
                        .HasColumnType("integer")
                        .HasColumnName("azure_destroy_failure_threshold");

                    b.Property<Guid>("DirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("directory_id");

                    b.Property<bool>("DynamicHost")
                        .HasColumnType("boolean")
                        .HasColumnName("dynamic_host");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Parallelism")
                        .HasColumnType("integer")
                        .HasColumnName("parallelism");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("StateBackup")
                        .HasColumnType("text")
                        .HasColumnName("state_backup");

                    b.Property<string>("SyncErrors")
                        .HasColumnType("text")
                        .HasColumnName("sync_errors");

                    b.Property<string>("TerraformVersion")
                        .HasColumnType("text")
                        .HasColumnName("terraform_version");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("HostId");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Apply", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Run", "Run")
                        .WithOne("Apply")
                        .HasForeignKey("Caster.Api.Domain.Models.Apply", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Run");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Design", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Directory", "Directory")
                        .WithMany("Designs")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.DesignModule", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Design", "Design")
                        .WithMany("Modules")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Directory", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Directory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caster.Api.Domain.Models.Project", "Project")
                        .WithMany("Directories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.File", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Directory", "Directory")
                        .WithMany("Files")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.User", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById");

                    b.HasOne("Caster.Api.Domain.Models.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Caster.Api.Domain.Models.Workspace", "Workspace")
                        .WithMany("Files")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Directory");

                    b.Navigation("LockedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.FileVersion", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.File", "File")
                        .WithMany("FileVersions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Caster.Api.Domain.Models.User", "TaggedBy")
                        .WithMany()
                        .HasForeignKey("TaggedById");

                    b.Navigation("File");

                    b.Navigation("ModifiedBy");

                    b.Navigation("TaggedBy");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.GroupMembership", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.User", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Host", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.HostMachine", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Host", "Host")
                        .WithMany("Machines")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.ModuleVersion", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Module", "Module")
                        .WithMany("Versions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Partition", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Pool", "Pool")
                        .WithMany("Partitions")
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Plan", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Run", "Run")
                        .WithOne("Plan")
                        .HasForeignKey("Caster.Api.Domain.Models.Plan", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Run");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Project", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Partition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId");

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.ProjectMembership", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Group", "Group")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("GroupId");

                    b.HasOne("Caster.Api.Domain.Models.Project", "Project")
                        .WithMany("Memberships")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.ProjectRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Group");

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Run", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Caster.Api.Domain.Models.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Caster.Api.Domain.Models.Workspace", "Workspace")
                        .WithMany("Runs")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.User", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.SystemRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Variable", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Design", "Design")
                        .WithMany("Variables")
                        .HasForeignKey("DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Vlan", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Partition", null)
                        .WithMany("Vlans")
                        .HasForeignKey("PartitionId");

                    b.HasOne("Caster.Api.Domain.Models.Pool", null)
                        .WithMany("Vlans")
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Workspace", b =>
                {
                    b.HasOne("Caster.Api.Domain.Models.Directory", "Directory")
                        .WithMany("Workspaces")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caster.Api.Domain.Models.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId");

                    b.Navigation("Directory");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Design", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Directory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Designs");

                    b.Navigation("Files");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.File", b =>
                {
                    b.Navigation("FileVersions");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Group", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ProjectMemberships");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Host", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Module", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Partition", b =>
                {
                    b.Navigation("Vlans");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Pool", b =>
                {
                    b.Navigation("Partitions");

                    b.Navigation("Vlans");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Project", b =>
                {
                    b.Navigation("Directories");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Run", b =>
                {
                    b.Navigation("Apply");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.User", b =>
                {
                    b.Navigation("GroupMemberships");

                    b.Navigation("ProjectMemberships");
                });

            modelBuilder.Entity("Caster.Api.Domain.Models.Workspace", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Runs");
                });
#pragma warning restore 612, 618
        }
    }
}
